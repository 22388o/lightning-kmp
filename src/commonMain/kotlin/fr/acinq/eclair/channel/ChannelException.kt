package fr.acinq.eclair.channel

import fr.acinq.bitcoin.ByteVector32
import fr.acinq.bitcoin.PrivateKey
import fr.acinq.bitcoin.Satoshi
import fr.acinq.bitcoin.Transaction
import fr.acinq.eclair.CltvExpiry
import fr.acinq.eclair.CltvExpiryDelta
import fr.acinq.eclair.MilliSatoshi
import fr.acinq.eclair.blockchain.fee.FeeratePerKw
import fr.acinq.eclair.io.ByteVector32KSerializer
import fr.acinq.eclair.io.PrivateKeyKSerializer
import fr.acinq.eclair.io.SatoshiKSerializer
import fr.acinq.eclair.io.TransactionKSerializer
import fr.acinq.eclair.wire.AnnouncementSignatures
import fr.acinq.eclair.wire.UpdateAddHtlc
import kotlinx.serialization.Serializable

@Serializable
sealed class ChannelException(val msg: String) : RuntimeException(msg) {
    abstract val channelId: ByteVector32
}

// @formatter:off
@Serializable data class DebugTriggeredException             (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("debug-mode triggered failure")
@Serializable data class InvalidChainHash                    (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = ByteVector32KSerializer::class) val local: ByteVector32, @Serializable(with = ByteVector32KSerializer::class) val remote: ByteVector32) : ChannelException("invalid chainHash (local=$local remote=$remote)")
@Serializable data class InvalidFundingAmount                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val fundingAmount: Satoshi, @Serializable(with = SatoshiKSerializer::class) val min: Satoshi, @Serializable(with = SatoshiKSerializer::class) val max: Satoshi) : ChannelException("invalid funding_satoshis=$fundingAmount (min=$min max=$max)")
@Serializable data class InvalidPushAmount                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val pushAmount: MilliSatoshi, val max: MilliSatoshi) : ChannelException("invalid pushAmount=$pushAmount (max=$max)")
@Serializable data class InvalidMaxAcceptedHtlcs             (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val maxAcceptedHtlcs: Int, val max: Int) : ChannelException("invalid max_accepted_htlcs=$maxAcceptedHtlcs (max=$max)")
@Serializable data class DustLimitTooSmall                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val dustLimit: Satoshi, @Serializable(with = SatoshiKSerializer::class) val min: Satoshi) : ChannelException("dustLimit=$dustLimit is too small (min=$min)")
@Serializable data class DustLimitTooLarge                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val dustLimit: Satoshi, @Serializable(with = SatoshiKSerializer::class) val max: Satoshi) : ChannelException("dustLimit=$dustLimit is too large (max=$max)")
@Serializable data class DustLimitAboveOurChannelReserve     (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val dustLimit: Satoshi, @Serializable(with = SatoshiKSerializer::class) val channelReserve: Satoshi) : ChannelException("dustLimit=$dustLimit is above our channelReserve=$channelReserve")
@Serializable data class ToSelfDelayTooHigh                  (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val toSelfDelay: CltvExpiryDelta, val max: CltvExpiryDelta) : ChannelException("unreasonable to_self_delay=$toSelfDelay (max=$max)")
@Serializable data class ChannelReserveTooHigh               (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val channelReserve: Satoshi, val reserveToFundingRatio: Double, val maxReserveToFundingRatio: Double) : ChannelException("channelReserve too high: reserve=$channelReserve fundingRatio=$reserveToFundingRatio maxFundingRatio=$maxReserveToFundingRatio")
@Serializable data class ChannelReserveBelowOurDustLimit     (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val channelReserve: Satoshi, @Serializable(with = SatoshiKSerializer::class) val dustLimit: Satoshi) : ChannelException("their channelReserve=$channelReserve is below our dustLimit=$dustLimit")
@Serializable data class ChannelReserveNotMet                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val toLocal: MilliSatoshi, val toRemote: MilliSatoshi, @Serializable(with = SatoshiKSerializer::class) val reserve: Satoshi) : ChannelException("channel reserve is not met toLocal=$toLocal toRemote=$toRemote reserve=$reserve")
@Serializable data class ChannelFundingError                 (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("channel funding error")
@Serializable data class NoMoreHtlcsClosingInProgress        (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("cannot send new htlcs, closing in progres")
@Serializable data class ClosingAlreadyInProgress            (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("closing already in progres")
@Serializable data class CannotCloseWithUnsignedOutgoingHtlcs(@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("cannot close when there are unsigned outgoing htlc")
@Serializable data class ChannelUnavailable                  (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("channel is unavailable (offline or closing)")
@Serializable data class InvalidFinalScript                  (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("invalid final script")
@Serializable data class FundingTxTimedout                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("funding tx timed out")
@Serializable data class FundingTxSpent                      (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = TransactionKSerializer::class) val spendingTx: Transaction) : ChannelException("funding tx has been spent by txid=${spendingTx.txid}")
@Serializable data class HtlcsTimedoutDownstream             (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val htlcs: Set<UpdateAddHtlc>) : ChannelException("one or more htlcs timed out downstream: ids=${htlcs.take(10).map { it.id } .joinToString(",")}") // we only display the first 10 ids
@Serializable data class HtlcsWillTimeoutUpstream            (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val htlcs: Set<UpdateAddHtlc>) : ChannelException("one or more htlcs that should be fulfilled are close to timing out upstream: ids=${htlcs.take(10).map { it.id }.joinToString()}") // we only display the first 10 ids
@Serializable data class HtlcOverriddenByLocalCommit         (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val htlc: UpdateAddHtlc) : ChannelException("htlc ${htlc.id} was overridden by local commit")
@Serializable data class FeerateTooSmall                     (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val remoteFeeratePerKw: FeeratePerKw) : ChannelException("remote fee rate is too small: remoteFeeratePerKw=${remoteFeeratePerKw.toLong()}")
@Serializable data class FeerateTooDifferent                 (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val localFeeratePerKw: FeeratePerKw, val remoteFeeratePerKw: FeeratePerKw) : ChannelException("local/remote feerates are too different: remoteFeeratePerKw=${remoteFeeratePerKw.toLong()} localFeeratePerKw=${localFeeratePerKw.toLong()}")
@Serializable data class InvalidAnnouncementSignatures       (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val annSigs: AnnouncementSignatures) : ChannelException("invalid announcement signatures: $annSigs")
@Serializable data class InvalidCommitmentSignature          (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = TransactionKSerializer::class) val tx: Transaction) : ChannelException("invalid commitment signature: tx=$tx")
@Serializable data class InvalidHtlcSignature                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = TransactionKSerializer::class) val tx: Transaction) : ChannelException("invalid htlc signature: tx=$tx")
@Serializable data class InvalidCloseSignature               (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = TransactionKSerializer::class) val tx: Transaction) : ChannelException("invalid close signature: tx=$tx")
@Serializable data class InvalidCloseFee                     (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val fee: Satoshi) : ChannelException("invalid close fee: fee_satoshis=$fee")
@Serializable data class HtlcSigCountMismatch                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val expected: Int, val actual: Int) : ChannelException("htlc sig count mismatch: expected=$expected actual: $actual")
@Serializable data class ForcedLocalCommit                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("forced local commit")
@Serializable data class UnexpectedHtlcId                    (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val expected: Long, val actual: Long) : ChannelException("unexpected htlc id: expected=$expected actual=$actual")
@Serializable data class ExpiryTooSmall                      (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val minimum: CltvExpiry, val actual: CltvExpiry, val blockCount: Long) : ChannelException("expiry too small: minimum=$minimum actual=$actual blockCount=$blockCount")
@Serializable data class ExpiryTooBig                        (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val maximum: CltvExpiry, val actual: CltvExpiry, val blockCount: Long) : ChannelException("expiry too big: maximum=$maximum actual=$actual blockCount=$blockCount")
@Serializable data class HtlcValueTooSmall                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val minimum: MilliSatoshi, val actual: MilliSatoshi) : ChannelException("htlc value too small: minimum=$minimum actual=$actual")
@OptIn(ExperimentalUnsignedTypes::class)
@Serializable data class HtlcValueTooHighInFlight            (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val maximum: Long, val actual: MilliSatoshi) : ChannelException("in-flight htlcs hold too much value: maximum=$maximum actual=$actual")
@Serializable data class TooManyAcceptedHtlcs                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val maximum: Long) : ChannelException("too many accepted htlcs: maximum=$maximum")
@Serializable data class InsufficientFunds                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val amount: MilliSatoshi, @Serializable(with = SatoshiKSerializer::class) val missing: Satoshi, @Serializable(with = SatoshiKSerializer::class) val reserve: Satoshi, @Serializable(with = SatoshiKSerializer::class) val fees: Satoshi) : ChannelException("insufficient funds: missing=$missing reserve=$reserve fees=$fees")
@Serializable data class RemoteCannotAffordFeesForNewHtlc    (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val amount: MilliSatoshi, @Serializable(with = SatoshiKSerializer::class) val missing: Satoshi, @Serializable(with = SatoshiKSerializer::class) val reserve: Satoshi, @Serializable(with = SatoshiKSerializer::class) val fees: Satoshi) : ChannelException("remote can't afford increased commit tx fees once new HTLC is added: missing=$missing reserve=$reserve fees=$fees")
@Serializable data class InvalidHtlcPreimage                 (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val id: Long) : ChannelException("invalid htlc preimage for htlc id=$id")
@Serializable data class UnknownHtlcId                       (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val id: Long) : ChannelException("unknown htlc id=$id")
@Serializable data class CannotExtractSharedSecret           (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val htlc: UpdateAddHtlc) : ChannelException("can't extract shared secret: paymentHash=${htlc.paymentHash} onion=${htlc.onionRoutingPacket}")
@Serializable data class FundeeCannotSendUpdateFee           (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("only the funder should send update_fee message")
@Serializable data class CannotAffordFees                    (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, @Serializable(with = SatoshiKSerializer::class) val missing: Satoshi, @Serializable(with = SatoshiKSerializer::class) val reserve: Satoshi, @Serializable(with = SatoshiKSerializer::class) val fees: Satoshi) : ChannelException("can't pay the fee: missing=$missing reserve=$reserve fees=$fees")
@Serializable data class CannotSignWithoutChanges            (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("cannot sign when there are no change")
@Serializable data class CannotSignBeforeRevocation          (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("cannot sign until next revocation hash is received")
@Serializable data class UnexpectedRevocation                (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("received unexpected RevokeAndAck message")
@Serializable data class InvalidRevocation                   (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("invalid revocation")
@Serializable data class InvalidRevokedCommitProof           (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val ourCommitmentNumber: Long, val theirCommitmentNumber: Long, @Serializable(with = PrivateKeyKSerializer::class) val perCommitmentSecret: PrivateKey) : ChannelException("counterparty claimed that we have a revoked commit but their proof doesn't check out: ourCommitmentNumber=$ourCommitmentNumber theirCommitmentNumber=$theirCommitmentNumber perCommitmentSecret=$perCommitmentSecret")
@Serializable data class CommitmentSyncError                 (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("commitment sync error")
@Serializable data class RevocationSyncError                 (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("revocation sync error")
@Serializable data class InvalidFailureCode                  (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("UpdateFailMalformedHtlc message doesn't have BADONION bit set")
@Serializable data class PleasePublishYourCommitment         (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32) : ChannelException("please publish your local commitment")
@Serializable data class CommandUnavailableInThisState       (@Serializable(with = ByteVector32KSerializer::class) override val channelId: ByteVector32, val command: String, val state: String) : ChannelException("cannot execute command=$command in state=$state")
// @formatter:on
